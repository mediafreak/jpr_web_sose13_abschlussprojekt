<?xml version="1.0" encoding="UTF-8"?>
<!-- "Salami Slice Design" (Schema mit Referenzen auf global deklarierte Elemente) 
     - wenig geschachteltes Schema mit Referenzen auf viele global deklarierte Elemente und Attribute 
       ("global" bedeutet: direkte Kinder des schema-Rootelements)
     - Die Kindselemente werden nicht lokal definiert, sondern per ref referenziert. 
     - Das Salami Slice Design Ã¤hnelt der Vorgehensweise bei DTDs 
     
     Quelle: http://www.torsten-horn.de/techdocs/java-xsd.htm#Schema-Salami 
     
     xmlns:xs:           Namensraum 
	   xmlns:	      			 Default-Namespace
     elementFormDefault: Wenn es Kindselemente gibt und diese lokalen Unterelemente ebenfalls den xmlns-Default-Namespace erhalten sollen, 
                         dann muss elementFormDefault="qualified" gesetzt werden -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  
  <!-- import/include von anderen xsd ist moeglich, ist mir aber noch nicht geglueckt -->
  <!-- <xs:schema targetNamespace="../aside" 
  xmlns:aside="../aside"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  elementFormDefault="qualified" > -->
  <!-- <xs:include schemaLocation="../aside.xsd" /> -->
  
  <xs:element name="termine">
    <!-- complexType-Element, um die Definition eines neuen (anonymen) Typs einzuleiten -->
    <xs:complexType>
      <!-- Legt fest, dass die Elemente in der Gruppe (sequence) in der angegebenen Reihenfolge 
           im enthaltenden Element angezeigt werden. -->
      <xs:sequence>
        <!-- 'ref' referenziert ein bestehendes Element 'kategorie',
         welches an anderer Stelle im Schema deklariert wurde,
         'maxOccurs= unbounded' keine Begrenzung der Anzahl des ref Elements,
         default fuer max-/minOccures: 1, 0=optional -->
        <xs:element ref="aside" />
        <xs:element maxOccurs="unbounded" ref="kategorie"/>
        <!-- <xs:element ref="aside:aside" />  noch vom Test zum Auslagern von xsd -->
      </xs:sequence>
      <!-- attribute kommen einmal oder keinmal vor; 'use' legt fest, 
           ob vorgeschrieben (required), optional oder verboten (prohibited);
           'type' nur wenn Inhalt kein simpleType-Element -->
      <xs:attribute name="name" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
 
   <xs:element name="aside">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="content"/>
      </xs:sequence>
      <!-- enthaelt Name-Attribut fuer h4-Element, somit koennte in XML (zB CMS) die Headline geaendert werde, 
           ohne dass in xsl-Datei gegangen werden muss -->
      <xs:attribute name="headline" use="required"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="content">
    <xs:complexType mixed="true">
      <xs:sequence>
        <!-- 'minOccurs=0' bedeutet, dass das Element optional ist, 
              wenn > 1 MUSS ein Element erscheinen, default fuer max-/minOccures: 1 -->
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="form"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="form">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="formElem"/>
        <xs:element maxOccurs="unbounded" ref="button"/>
      </xs:sequence>
      <xs:attribute name="action" use="required"/>
      <!-- xs:NCName Wert darf ausschliesslich aus Buchstaben, Ziffern, Ideographen sowie dem Unterstrich, 
      dem Bindestrich, dem Punkt und dem Doppelpunkt bestehen. 
      Ziffern, Bindestrich und Punkt duerfen nicht am Anfang eines Namens verwendet werden, 
      innerhalb des Namens sind sie aber erlaubt -->
      <xs:attribute name="method" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="formElem">
    <xs:complexType>
      <xs:attribute name="autocomplete" use="required" type="xs:NCName"/>
      <xs:attribute name="label" use="required" type="xs:NCName"/>
      <xs:attribute name="placeholder" use="required"/>
      <xs:attribute name="required" use="required" type="xs:integer"/>
      <xs:attribute name="type" use="required" type="xs:NCName"/>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
      <xs:attribute name="id" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="button">
    <xs:complexType>
      <xs:attribute name="label" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="kategorie">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="event"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
    </xs:complexType>
    </xs:element>
  
  <xs:element name="event">
    <xs:complexType>
      <xs:sequence>
        <!-- min-/maxOccures=1 (default) -->
        <xs:element ref="datum"/>
        <xs:element ref="veranstaltung"/>
        <xs:element ref="veranstalter"/>
        <xs:element minOccurs="0" ref="uhrzeit"/>
        <xs:element ref="adresse"/>
        <xs:element ref="eintritt"/>
        <xs:element minOccurs="0" ref="url"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="datum">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="wochentag" />
        <xs:element ref="tag"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- XML Schema stellt einige grundlegende atomare Datentypen bereit ( wie z.B. in C, Java oder SQL)
    xs:string, xs:decimal, xs:integer, xs:float, xs:boolean, xs:date, xs:time;
    Hinzu kommen weitere XML-spezifische atomare Typen, unter anderem:
    QName: Qualifizierter Name, global eindeutiger Bezeichner. Aufgebaut aus sog. NCNames (Non-Colonized Names), wobei jeder NCName bis auf den letzten einen Namensraum (Namespace) bezeichnet. Der letzte NCName entspricht dem lokalen Namen innerhalb des Namensraumes. Die einzelnen NCNames werden mittels Punkt (.) zu einem QName zusammengesetzt.
    anyURI: Uniform Resource Identifier (URI)
    language: Sprachbezeichnung, z. B. de-DE, en-US, fr
    ID: Identifikationsattribut innerhalb von XML-Elementen
    IDREF: Referenz auf einen ID-Wert
    Einfache XML-Datentypen (simple) duerfen weder XML-Kindelemente enthalten noch XML-Attribute besitzen.
    Ausser den atomaren Datentypen gehoeren Listen und Unions (bestehend aus atomaren Elementen und Listen) zu den einfachen Typen -->
  <xs:element name="wochentag" type="xs:NCName"/>
  <xs:element name="tag" type="xs:decimal"/>
  <xs:element name="veranstaltung" type="xs:string"/>
  
  <xs:element name="veranstalter">
    <xs:complexType mixed="true">
      <!-- enthaelt Name-Attribut fuer th-Element, somit koennte in XML der Name geaendert werde, 
           ohne dass in xsl-Datei gegangen werden muss -->
      <xs:attribute name="name" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="uhrzeit">
    <xs:complexType>
      <!-- Das Element xs:simpleContent wird in xs:complexType-Elementen verwendet, wenn deren Inhalt aus einem einfachen Typ, 
           wie zum Beispiel xs:string oder xs:integer, und nicht aus Kindelementen oder gemischtem Inhalt besteht. 
           Gewoehnlich geschieht das dann, wenn der einzige Grund dafuer, dass ein Element ein komplexer und kein einfacher Typ ist, 
           darin besteht, dass er Attribute haben kann. 
           xs:extension erweitert complexType um die Attribute -->
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <!-- enthaelt Name-Attribut fuer th-Element, somit koennte in XML der Name geaendert werde, 
           ohne dass in xsl-Datei gegangen werden muss -->
          <xs:attribute name="name" use="required" type="xs:string"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="adresse">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="strasse"/>
        <xs:element minOccurs="0" ref="zusatz"/>
        <xs:element ref="plz"/>
        <xs:element ref="ort"/>
      </xs:sequence>
      <!-- enthaelt Name-Attribut fuer th-Element, somit koennte in XML der Name geaendert werde, 
           ohne dass in xsl-Datei gegangen werden muss -->
      <xs:attribute name="name" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="strasse" type="xs:string"/>
  <xs:element name="zusatz" type="xs:string"/>
  <xs:element name="plz" type="xs:integer"/>
  <xs:element name="ort" type="xs:string"/>
  
  <xs:element name="eintritt">
    <xs:complexType mixed="true">
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <!-- enthaelt Name-Attribut fuer th-Element, somit koennte in XML der Name geaendert werde, 
           ohne dass in xsl-Datei gegangen werden muss -->
          <xs:attribute name="name" use="required" type="xs:string"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="url" type="xs:string"/>

</xs:schema>